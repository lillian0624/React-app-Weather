{"version":3,"sources":["Components/Weather.js","Components/Forecast.js","Components/ChangeCity.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","_ref","apiKey","city","_useState","useState","_useState2","_slicedToArray","weatherData","setWeatherData","useEffect","apiUrl","concat","axios","get","then","response","data","catch","error","console","React","createElement","weatherIconUrl","weather","icon","main","temp","toFixed","src","alt","description","Forecast","forecastData","setForecastData","list","length","forecastList","dailyData","forEach","forecast","date","dt_txt","split","maxTemp","minTemp","Infinity","temp_max","temp_min","className","Object","keys","map","key","ChangeCity","onCitySubmit","setCity","onSubmit","e","preventDefault","trim","type","placeholder","value","onChange","target","API_KEY","App","newCity","log","reportWebVitals","onPerfEntry","Function","__webpack_require__","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.6facd071.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst Weather = ({ apiKey, city }) => {\n  const [weatherData, setWeatherData] = useState(null);\n\n  useEffect(() => {\n    const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`;\n\n    axios\n      .get(apiUrl)\n      .then((response) => {\n        setWeatherData(response.data);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [apiKey, city]);\n\n  if (!weatherData) {\n    return <div>Loading...</div>;\n  }\n\n  const weatherIconUrl = `https://openweathermap.org/img/wn/${weatherData.weather[0].icon}.png`;\n\n  return (\n    <div>\n      <h2>Current Weather in {city} </h2>\n\n      <p> {(weatherData.main.temp - 273.15).toFixed(2)}°C</p>\n      <img src={weatherIconUrl} alt=\"Weather Icon\" />\n      <p>Weather: {weatherData.weather[0].description}</p>\n    </div>\n  );\n};\n\nexport default Weather;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst Forecast = ({ apiKey, city }) => {\n  const [forecastData, setForecastData] = useState(null);\n\n  useEffect(() => {\n    const apiUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}&units=metric`;\n\n    axios\n      .get(apiUrl)\n      .then((response) => {\n        // console.log(response.data);\n        setForecastData(response.data);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [apiKey, city]);\n\n  // Check if forecastData is still null (data not received yet)\n  if (!forecastData) {\n    return <div>Loading...</div>;\n  }\n\n  if (!forecastData.list || forecastData.list.length === 0) {\n    return <div>No forecast data available.</div>;\n  }\n\n  // Extract the list of forecasts from the API response for the next 5 days\n  const forecastList = forecastData.list;\n\n  const dailyData = {};\n\n  forecastList.forEach((forecast) => {\n    const date = forecast.dt_txt.split(\" \")[0];\n\n    if (!dailyData[date]) {\n      dailyData[date] = {\n        maxTemp: -Infinity,\n        minTemp: Infinity,\n\n        weather: forecast.weather[0].description,\n        icon: forecast.weather[0].icon, // Store the icon code\n      };\n    }\n\n    if (forecast.main.temp_max > dailyData[date].maxTemp) {\n      dailyData[date].maxTemp = forecast.main.temp_max;\n    }\n\n    if (forecast.main.temp_min < dailyData[date].minTemp) {\n      dailyData[date].minTemp = forecast.main.temp_min;\n    }\n\n    dailyData[date].weather = forecast.weather[0].description;\n  });\n\n  return (\n    <div>\n      <h2>5-Day Weather Forecast for {city}</h2>\n      <div className=\"forecast-container\">\n        {Object.keys(dailyData).map((date) => (\n          <div key={date} className=\"forecast-item\">\n            {\" \"}\n              \n            <p>Date: {date}</p>\n            <p>Highest Temperature: {dailyData[date].maxTemp}°C</p>\n            <p>Lowest Temperature: {dailyData[date].minTemp}°C</p>\n            <img\n              src={`https://openweathermap.org/img/wn/${dailyData[date].icon}.png`}\n              alt=\"Weather Icon\"\n            />\n            <p>Weather:{dailyData[date].weather}</p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Forecast;\n","import React, { useState } from \"react\";\n\nconst ChangeCity = ({ apiKey, onCitySubmit }) => {\n  const [city, setCity] = useState(\"\");\n\n  const handleCityChange = (e) => {\n    setCity(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (city.trim() !== \"\") {\n      onCitySubmit(city); // Call the parent component's callback with the city name\n      setCity(\"\"); // Clear the input field\n    }\n  };\n\n  return (\n    <div className=\"change-city-container\">\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          className=\"city-input\"\n          placeholder=\"Enter a city\"\n          value={city || \"\"}\n          onChange={handleCityChange}\n        />\n        <button type=\"submit\" className=\"submit-button\">\n          Get Weather\n        </button>\n      </form>\n    </div>\n  );\n};\nexport default ChangeCity;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Weather from \"./Components/Weather\";\nimport Forecast from \"./Components/Forecast\";\nimport ChangeCity from \"./Components/ChangeCity\";\n\nconst API_KEY = \"621628665af6bfd2cd7613c424e1a525\";\n\nfunction App() {\n  const [city, setCity] = useState(\"Canberra\");\n\n  const handleCitySubmit = (newCity) => {\n    console.log(\"New city:\", newCity);\n    setCity(newCity);\n  };\n\n  return (\n    <div className=\"App\">\n      <ChangeCity apiKey={API_KEY} onCitySubmit={handleCitySubmit} />\n      <Weather apiKey={API_KEY} city={city} />\n      <Forecast apiKey={API_KEY} city={city} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\n\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}